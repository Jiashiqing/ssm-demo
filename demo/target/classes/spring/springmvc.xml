<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	
	<!-- mvc:annotation-driven默认加载很多参数绑定方法，比如json转换解析器就默认加载了.
	 如果使用mvc:annotation-driven就不用配置RequestMappingHandlerMapping和RequestMappingHandlerAdapter 
	实际开发中使用mvc:annotation-driven -->
	<mvc:annotation-driven conversion-service="conversionService" validator="validator"/>
	
	<!-- 激活Spring注解方式： 自动扫描该包，并注入bean，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.justin.ssm"/>
<!--	<context:component-scan base-package="com.justin.ssm.controller"/>
 	<context:component-scan base-package="com.justin.ssm.converter"/>
	<context:component-scan base-package="com.justin.ssm.service.impl"/> -->
	
	<!--自定义参数绑定 , 注册ConversionService-->  
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">  
		<!-- 转换器 -->
	    <property name="converters">
	    	<list>
	            <bean class="com.justin.ssm.converter.StringToDateConverter">
					<constructor-arg index="0" value="yyyy-MM-dd HH:mm:ss"/>
				</bean>
	    	</list>
	    </property>  
	</bean>
	
	<!-- 校验器 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- 校验器 -->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
		<!-- 指定校验使用的资源文件，如果不指定则默认使用classpath下的ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource"/>
	</bean>
	
	<!-- 校验错误信息配置文件 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- 资源文件名 -->
		<property name="basenames">
			<list>
				<value>classpath:CustomValidationMessage</value>
			</list>
		</property>
		<!-- 资源文件编码格式 -->
		<property name="fileEncodings" value="utf-8"/>
		<!-- 对资源文件内容缓存时间，单位秒 -->
		<property name="cacheSeconds" value="120"/>
	</bean>
	
	<!-- 全局异常处理器
		只要实现HandlerExceptionResolver接口就是全局异常处理器
	 -->
	<bean class="com.justin.ssm.exception.CustomExceptionResolver"></bean>
	
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean> 
	
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->  
   	<!--  <bean id="mappingJacksonHttpMessageConverter"  
        class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">  
        <property name="supportedMediaTypes">  
            <list>  
                <value>text/html;charset=UTF-8</value>  
            </list>  
        </property>  
    </bean>  -->
    
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->  
   	<!--  <bean 
        class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">  
        <property name="messageConverters">  
            <list>  
            	JSON转换器 
                <ref bean="mappingJacksonHttpMessageConverter" />  
            </list>  
        </property>  
    </bean>  
    	注意：如果使用<mvc:annotation-driven/>则不用定义上边的内容
    -->
    
    <!-- 拦截器 -->
	<mvc:interceptors>
		<!-- 使用bean定义一个Interceptor，
		直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
		<!-- <bean class="com.justin.ssm.interceptor.AllInterceptor" /> -->
		<!-- 多个拦截器，执行顺序 -->
 		<mvc:interceptor>
			<!-- /**表示所有url，包括子url路径 -->
			<mvc:mapping path="/**" />
			<!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
			<bean class="com.justin.ssm.interceptor.LoginInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- /**表示所有url，包括子url路径 -->
			<mvc:mapping path="/**" />
			<!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
			<bean class="com.justin.ssm.interceptor.HandlerInterceptor1" />
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- /**表示所有url，包括子url路径 -->
			<mvc:mapping path="/**" />
			<!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
			<bean class="com.justin.ssm.interceptor.HandlerInterceptor2" />
		</mvc:interceptor>
	</mvc:interceptors> 
	
	<!-- 静态资源的解析 
	包括：js、css、img、等
	-->
	<mvc:default-servlet-handler/>
	<!-- <mvc:resources mapping="/js/**" location="/js/" cache-period="31556926"/>  
    <mvc:resources mapping="/css/**" location="/css/" cache-period="31556926"/>
	<mvc:resources mapping="/images/**" location="/images/" cache-period="31556926"/>   -->
	
	<!-- 配置视图解析 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
</beans>

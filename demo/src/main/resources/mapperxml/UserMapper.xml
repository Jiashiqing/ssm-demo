<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间，作用：对sql进行分类管理，理解sql隔离 
注意：使用mapper代理方法时，namespace有特殊重要的作用,namespace等于mapper接口地址
-->
<mapper namespace="com.justin.ssm.mapper.UserMapper">
	<!-- 开启本mapper下的namespace下的二级缓存 
	type:指定cache接口的实现类的类型，mybatis默认使用PrepetualCache
	要和ehcache整合，需要配置type为ehcache接口的实现类型
	-->
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>

	<!-- sql片段
	 id:sql片段的唯一标识
	 
	 经验：sql片段是基于单表来定义，这样这个sql片段可重用性才高
	 	在sql片段中不要包含where
	 -->
	<sql id="query_user_where">
		<if test="ids!=null">
			<!-- 使用foreach遍历传入ids 
			collection:指定输入对象中集合属性
			item:每个遍历生成对象名
			open:开始遍历时要拼接的串
			close:结束遍历时要拼接的串
			separator:遍历的两个对象中需要拼接的串
			
			使用foreach实现下面sql拼接
			AND (id=1 OR id=10 OR id=12)
			-->
			<foreach collection="ids" item="user_id" open="AND (" close=")" separator="OR">
				<!-- 每次遍历时需要拼接的串 -->
				id=#{user_id}
			</foreach>
		</if>
	</sql>
	
	
	<!-- 定义resultMap
	将select id id_,username username_ from user和User类中的属性做一个映射
	type:resultMap最终映射的java对象类型，可以使用别名
	id:对resultMap的唯一标识	
	 -->
	<resultMap type="com.justin.ssm.po.User" id="userResultMap">
		<!-- id表示查询结果集中的唯一标识 
		column:查询出来的列名
		property:type指定的pojo类型中的属性名
		最终resultMap对column和property作一个映射关系（对应关系）
		-->
		<id column="id_" property="id"/>
		<!-- result表示对普通列的定义
		column:查询出来的列名
		property:type指定的pojo类型中的属性名
		最终resultMap对column和property作一个映射关系（对应关系）
		 -->
		<result column="username_" property="username"/>
	</resultMap>

	<!-- 在映射文件中配置很多sql语句 -->
	<!-- 通过select执行数据库语句
	id:标识映射文件中的sql，将sql语句封装到mappedStatement对象中,所以称为statement的id。
	
	parameterType:指定输入参数的类型
	resultType:指定sql输出结果所映射的java对象的类型
	select:指定resultType所表示将单条记录映射成的java对象
	
	#{}标识一个占位符
	#{id}其中的id表示接收输入的参数，参数名称就是id，如果输入参数是简单类型，#{}中的参数可以任意，可以是value或者其他
	
	 -->
	 <select id="findUserById" parameterType="java.lang.Integer" resultType="com.justin.ssm.po.User" ><!-- useCache="false" -->
	 	SELECT * FROM USER WHERE id=#{id}
	 </select>
	 
	 <!-- 根据用户名称模糊查询用户信息 ,可能返回多条信息
		${}:表示拼接sql串，将接收到参数的内容不加任何的修饰拼接在sql中。
		  使用${}拼接sql，会引起sql注入
		${value}:接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value
	 -->
	 <select id="findUserByName" parameterType="java.lang.String" resultType="com.justin.ssm.po.User">
	 	SELECT * FROM USER WHERE username LIKE '%${value}%'
	 </select>
	 
	 <!-- 使用resultMap进行输出映射 
	 resultMap:指定定义的resultMap的id,如果这个resultMap在其他的mapper文件中，前边需要加namespace(命名空间)
	 -->
	 <select id="findUserByIdResultMap" parameterType="java.lang.Integer" resultMap="userResultMap">
	 	SELECT id id_,username username_ FROM USER WHERE id=#{id}
	 </select>
	 
	 
	 <!-- 添加用户
	 parameterType:指定输入参数类型是pojo(包含用户信息)
	 #{}中指定的pojo的属性名，接收到pojo对象的属性值
	  -->
	 <insert id="insertUser" parameterType="com.justin.ssm.po.User">
	 	<!-- 
	 		使用msql的LAST_INSERT_ID()生成主键
	 		将插入数据的主键返回，返回到User对象中
	 		
	 		SELECT LAST_INSERT_ID():获得刚刚insert记录的主键值，只适用于自增的主键
	 		keyProperty:将查询到的主键值设置到parameterType指定的对象的那个属性
	 		order:SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说的执行顺序
	 		resultType:指定SELECT LAST_INSERT_ID()的结果类型
	 	 -->
	 	<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
	 		SELECT LAST_INSERT_ID()
	 	</selectKey>
	 	insert into user(username,sex,birthday,address) values(#{username},#{sex},#{birthday},#{address})

<!-- 	 	
	 	使用msql的uuid()生成主键
	 		执行过程：
	 		首先通过uuid()得到主键，将主键设置到user对象的id属性中，
	 		其次insert执行时，从user对象中取出id属性值
	 	
	 	<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
	 		SELECT uuid()
	 	</selectKey>
	 	insert into user(id,username,sex,birthday,address) values(#{id},#{username},#{sex},#{birthday},#{address})
-->	
	 </insert>
	 
	 <!-- 删除用户 -->
	 <delete id="deleteUser" parameterType="java.lang.Integer">
	 	delete from user where id=#{id}
	 </delete>
	 
	 <!-- 更新用户 
	 	需要传入用户的id和需要更新的信息
	 	parameterType指定user对象，包括id和更新信息
	 	注意：id必须存在
	 	#{id}:从输入的uesr对象中获取id属性值
	 -->
	 <update id="updateUser" parameterType="com.justin.ssm.po.User">
	 	update user set username=#{username},sex=#{sex},birthday=#{birthday},address=#{address} where id=#{id}
	 </update>
	 
</mapper>







